/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API Menu
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersMenu,
    ControllersMenuFromJSON,
    ControllersMenuToJSON,
    EntMenu,
    EntMenuFromJSON,
    EntMenuToJSON,
    EntMenugroup,
    EntMenugroupFromJSON,
    EntMenugroupToJSON,
    EntMenutype,
    EntMenutypeFromJSON,
    EntMenutypeToJSON,
    EntUser,
    EntUserFromJSON,
    EntUserToJSON,
} from '../models';

export interface CreateMenuRequest {
    menu: ControllersMenu;
}

export interface CreateMenugroupRequest {
    menugroup: EntMenugroup;
}

export interface CreateMenutypeRequest {
    menutype: EntMenutype;
}

export interface CreateUserRequest {
    user: EntUser;
}

export interface DeleteMenuRequest {
    id: number;
}

export interface DeleteMenugroupRequest {
    id: number;
}

export interface DeleteMenutypeRequest {
    id: number;
}

export interface DeleteUserRequest {
    id: number;
}

export interface GetMenuRequest {
    id: number;
}

export interface GetMenugroupRequest {
    id: number;
}

export interface GetMenutypeRequest {
    id: number;
}

export interface GetUserRequest {
    id: number;
}

export interface ListMenuRequest {
    limit?: number;
    offset?: number;
}

export interface ListMenugroupRequest {
    limit?: number;
    offset?: number;
}

export interface ListMenutypeRequest {
    limit?: number;
    offset?: number;
}

export interface ListUserRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateMenugroupRequest {
    id: number;
    menugroup: EntMenugroup;
}

export interface UpdateMenutypeRequest {
    id: number;
    menutype: EntMenutype;
}

export interface UpdateUserRequest {
    id: number;
    user: EntUser;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create menu
     * Create menu
     */
    async createMenuRaw(requestParameters: CreateMenuRequest): Promise<runtime.ApiResponse<EntMenu>> {
        if (requestParameters.menu === null || requestParameters.menu === undefined) {
            throw new runtime.RequiredError('menu','Required parameter requestParameters.menu was null or undefined when calling createMenu.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/menus`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersMenuToJSON(requestParameters.menu),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMenuFromJSON(jsonValue));
    }

    /**
     * Create menu
     * Create menu
     */
    async createMenu(requestParameters: CreateMenuRequest): Promise<EntMenu> {
        const response = await this.createMenuRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create menugroup
     * Create menugroup
     */
    async createMenugroupRaw(requestParameters: CreateMenugroupRequest): Promise<runtime.ApiResponse<EntMenugroup>> {
        if (requestParameters.menugroup === null || requestParameters.menugroup === undefined) {
            throw new runtime.RequiredError('menugroup','Required parameter requestParameters.menugroup was null or undefined when calling createMenugroup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/menugroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntMenugroupToJSON(requestParameters.menugroup),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMenugroupFromJSON(jsonValue));
    }

    /**
     * Create menugroup
     * Create menugroup
     */
    async createMenugroup(requestParameters: CreateMenugroupRequest): Promise<EntMenugroup> {
        const response = await this.createMenugroupRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create menutype
     * Create menutype
     */
    async createMenutypeRaw(requestParameters: CreateMenutypeRequest): Promise<runtime.ApiResponse<EntMenutype>> {
        if (requestParameters.menutype === null || requestParameters.menutype === undefined) {
            throw new runtime.RequiredError('menutype','Required parameter requestParameters.menutype was null or undefined when calling createMenutype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/menutypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntMenutypeToJSON(requestParameters.menutype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMenutypeFromJSON(jsonValue));
    }

    /**
     * Create menutype
     * Create menutype
     */
    async createMenutype(requestParameters: CreateMenutypeRequest): Promise<EntMenutype> {
        const response = await this.createMenutypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create user
     * Create user
     */
    async createUserRaw(requestParameters: CreateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling createUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * Create user
     * Create user
     */
    async createUser(requestParameters: CreateUserRequest): Promise<EntUser> {
        const response = await this.createUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get menu by ID
     * Delete a menu entity by ID
     */
    async deleteMenuRaw(requestParameters: DeleteMenuRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteMenu.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/menus/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get menu by ID
     * Delete a menu entity by ID
     */
    async deleteMenu(requestParameters: DeleteMenuRequest): Promise<object> {
        const response = await this.deleteMenuRaw(requestParameters);
        return await response.value();
    }

    /**
     * get menugroup by ID
     * Delete a menugroup entity by ID
     */
    async deleteMenugroupRaw(requestParameters: DeleteMenugroupRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteMenugroup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/menugroups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get menugroup by ID
     * Delete a menugroup entity by ID
     */
    async deleteMenugroup(requestParameters: DeleteMenugroupRequest): Promise<object> {
        const response = await this.deleteMenugroupRaw(requestParameters);
        return await response.value();
    }

    /**
     * get menutype by ID
     * Delete a menutype entity by ID
     */
    async deleteMenutypeRaw(requestParameters: DeleteMenutypeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteMenutype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/menutypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get menutype by ID
     * Delete a menutype entity by ID
     */
    async deleteMenutype(requestParameters: DeleteMenutypeRequest): Promise<object> {
        const response = await this.deleteMenutypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUser(requestParameters: DeleteUserRequest): Promise<object> {
        const response = await this.deleteUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get menu by ID
     * Get a menu entity by ID
     */
    async getMenuRaw(requestParameters: GetMenuRequest): Promise<runtime.ApiResponse<EntMenu>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMenu.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/menus/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMenuFromJSON(jsonValue));
    }

    /**
     * get menu by ID
     * Get a menu entity by ID
     */
    async getMenu(requestParameters: GetMenuRequest): Promise<EntMenu> {
        const response = await this.getMenuRaw(requestParameters);
        return await response.value();
    }

    /**
     * get menugroup by ID
     * Get a menugroup entity by ID
     */
    async getMenugroupRaw(requestParameters: GetMenugroupRequest): Promise<runtime.ApiResponse<EntMenugroup>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMenugroup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/menugroups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMenugroupFromJSON(jsonValue));
    }

    /**
     * get menugroup by ID
     * Get a menugroup entity by ID
     */
    async getMenugroup(requestParameters: GetMenugroupRequest): Promise<EntMenugroup> {
        const response = await this.getMenugroupRaw(requestParameters);
        return await response.value();
    }

    /**
     * get menutype by ID
     * Get a menutype entity by ID
     */
    async getMenutypeRaw(requestParameters: GetMenutypeRequest): Promise<runtime.ApiResponse<EntMenutype>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMenutype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/menutypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMenutypeFromJSON(jsonValue));
    }

    /**
     * get menutype by ID
     * Get a menutype entity by ID
     */
    async getMenutype(requestParameters: GetMenutypeRequest): Promise<EntMenutype> {
        const response = await this.getMenutypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUserRaw(requestParameters: GetUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUser(requestParameters: GetUserRequest): Promise<EntUser> {
        const response = await this.getUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * list menu entities
     * List menu entities
     */
    async listMenuRaw(requestParameters: ListMenuRequest): Promise<runtime.ApiResponse<Array<EntMenu>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/menus`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntMenuFromJSON));
    }

    /**
     * list menu entities
     * List menu entities
     */
    async listMenu(requestParameters: ListMenuRequest): Promise<Array<EntMenu>> {
        const response = await this.listMenuRaw(requestParameters);
        return await response.value();
    }

    /**
     * list menugroup entities
     * List menugroup entities
     */
    async listMenugroupRaw(requestParameters: ListMenugroupRequest): Promise<runtime.ApiResponse<Array<EntMenugroup>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/menugroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntMenugroupFromJSON));
    }

    /**
     * list menugroup entities
     * List menugroup entities
     */
    async listMenugroup(requestParameters: ListMenugroupRequest): Promise<Array<EntMenugroup>> {
        const response = await this.listMenugroupRaw(requestParameters);
        return await response.value();
    }

    /**
     * list menutype entities
     * List menutype entities
     */
    async listMenutypeRaw(requestParameters: ListMenutypeRequest): Promise<runtime.ApiResponse<Array<EntMenutype>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/menutypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntMenutypeFromJSON));
    }

    /**
     * list menutype entities
     * List menutype entities
     */
    async listMenutype(requestParameters: ListMenutypeRequest): Promise<Array<EntMenutype>> {
        const response = await this.listMenutypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list user entities
     * List user entities
     */
    async listUserRaw(requestParameters: ListUserRequest): Promise<runtime.ApiResponse<Array<EntUser>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntUserFromJSON));
    }

    /**
     * list user entities
     * List user entities
     */
    async listUser(requestParameters: ListUserRequest): Promise<Array<EntUser>> {
        const response = await this.listUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * update menugroup by ID
     * Update a menugroup entity by ID
     */
    async updateMenugroupRaw(requestParameters: UpdateMenugroupRequest): Promise<runtime.ApiResponse<EntMenugroup>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateMenugroup.');
        }

        if (requestParameters.menugroup === null || requestParameters.menugroup === undefined) {
            throw new runtime.RequiredError('menugroup','Required parameter requestParameters.menugroup was null or undefined when calling updateMenugroup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/menugroups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntMenugroupToJSON(requestParameters.menugroup),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMenugroupFromJSON(jsonValue));
    }

    /**
     * update menugroup by ID
     * Update a menugroup entity by ID
     */
    async updateMenugroup(requestParameters: UpdateMenugroupRequest): Promise<EntMenugroup> {
        const response = await this.updateMenugroupRaw(requestParameters);
        return await response.value();
    }

    /**
     * update menutype by ID
     * Update a menutype entity by ID
     */
    async updateMenutypeRaw(requestParameters: UpdateMenutypeRequest): Promise<runtime.ApiResponse<EntMenutype>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateMenutype.');
        }

        if (requestParameters.menutype === null || requestParameters.menutype === undefined) {
            throw new runtime.RequiredError('menutype','Required parameter requestParameters.menutype was null or undefined when calling updateMenutype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/menutypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntMenutypeToJSON(requestParameters.menutype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMenutypeFromJSON(jsonValue));
    }

    /**
     * update menutype by ID
     * Update a menutype entity by ID
     */
    async updateMenutype(requestParameters: UpdateMenutypeRequest): Promise<EntMenutype> {
        const response = await this.updateMenutypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUserRaw(requestParameters: UpdateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUser.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling updateUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUser(requestParameters: UpdateUserRequest): Promise<EntUser> {
        const response = await this.updateUserRaw(requestParameters);
        return await response.value();
    }

}
