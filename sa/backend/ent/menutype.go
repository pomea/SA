// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/pomea/app/ent/menutype"
)

// Menutype is the model entity for the Menutype schema.
type Menutype struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MenutypeQuery when eager-loading is set.
	Edges MenutypeEdges `json:"edges"`
}

// MenutypeEdges holds the relations/edges for other nodes in the graph.
type MenutypeEdges struct {
	// Menus holds the value of the menus edge.
	Menus []*Menu
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MenusOrErr returns the Menus value or an error if the edge
// was not loaded in eager-loading.
func (e MenutypeEdges) MenusOrErr() ([]*Menu, error) {
	if e.loadedTypes[0] {
		return e.Menus, nil
	}
	return nil, &NotLoadedError{edge: "menus"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Menutype) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // type
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Menutype fields.
func (m *Menutype) assignValues(values ...interface{}) error {
	if m, n := len(values), len(menutype.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	m.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field type", values[0])
	} else if value.Valid {
		m.Type = value.String
	}
	return nil
}

// QueryMenus queries the menus edge of the Menutype.
func (m *Menutype) QueryMenus() *MenuQuery {
	return (&MenutypeClient{config: m.config}).QueryMenus(m)
}

// Update returns a builder for updating this Menutype.
// Note that, you need to call Menutype.Unwrap() before calling this method, if this Menutype
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Menutype) Update() *MenutypeUpdateOne {
	return (&MenutypeClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (m *Menutype) Unwrap() *Menutype {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Menutype is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Menutype) String() string {
	var builder strings.Builder
	builder.WriteString("Menutype(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", type=")
	builder.WriteString(m.Type)
	builder.WriteByte(')')
	return builder.String()
}

// Menutypes is a parsable slice of Menutype.
type Menutypes []*Menutype

func (m Menutypes) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
