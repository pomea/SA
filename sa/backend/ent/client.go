// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/pomea/app/ent/migrate"

	"github.com/pomea/app/ent/menu"
	"github.com/pomea/app/ent/menugroup"
	"github.com/pomea/app/ent/menutype"
	"github.com/pomea/app/ent/user"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Menu is the client for interacting with the Menu builders.
	Menu *MenuClient
	// Menugroup is the client for interacting with the Menugroup builders.
	Menugroup *MenugroupClient
	// Menutype is the client for interacting with the Menutype builders.
	Menutype *MenutypeClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Menu = NewMenuClient(c.config)
	c.Menugroup = NewMenugroupClient(c.config)
	c.Menutype = NewMenutypeClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Menu:      NewMenuClient(cfg),
		Menugroup: NewMenugroupClient(cfg),
		Menutype:  NewMenutypeClient(cfg),
		User:      NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:    cfg,
		Menu:      NewMenuClient(cfg),
		Menugroup: NewMenugroupClient(cfg),
		Menutype:  NewMenutypeClient(cfg),
		User:      NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Menu.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Menu.Use(hooks...)
	c.Menugroup.Use(hooks...)
	c.Menutype.Use(hooks...)
	c.User.Use(hooks...)
}

// MenuClient is a client for the Menu schema.
type MenuClient struct {
	config
}

// NewMenuClient returns a client for the Menu from the given config.
func NewMenuClient(c config) *MenuClient {
	return &MenuClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `menu.Hooks(f(g(h())))`.
func (c *MenuClient) Use(hooks ...Hook) {
	c.hooks.Menu = append(c.hooks.Menu, hooks...)
}

// Create returns a create builder for Menu.
func (c *MenuClient) Create() *MenuCreate {
	mutation := newMenuMutation(c.config, OpCreate)
	return &MenuCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Menu.
func (c *MenuClient) Update() *MenuUpdate {
	mutation := newMenuMutation(c.config, OpUpdate)
	return &MenuUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MenuClient) UpdateOne(m *Menu) *MenuUpdateOne {
	mutation := newMenuMutation(c.config, OpUpdateOne, withMenu(m))
	return &MenuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MenuClient) UpdateOneID(id int) *MenuUpdateOne {
	mutation := newMenuMutation(c.config, OpUpdateOne, withMenuID(id))
	return &MenuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Menu.
func (c *MenuClient) Delete() *MenuDelete {
	mutation := newMenuMutation(c.config, OpDelete)
	return &MenuDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MenuClient) DeleteOne(m *Menu) *MenuDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MenuClient) DeleteOneID(id int) *MenuDeleteOne {
	builder := c.Delete().Where(menu.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MenuDeleteOne{builder}
}

// Create returns a query builder for Menu.
func (c *MenuClient) Query() *MenuQuery {
	return &MenuQuery{config: c.config}
}

// Get returns a Menu entity by its id.
func (c *MenuClient) Get(ctx context.Context, id int) (*Menu, error) {
	return c.Query().Where(menu.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MenuClient) GetX(ctx context.Context, id int) *Menu {
	m, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return m
}

// QueryOwner queries the owner edge of a Menu.
func (c *MenuClient) QueryOwner(m *Menu) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(menu.Table, menu.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, menu.OwnerTable, menu.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryType queries the type edge of a Menu.
func (c *MenuClient) QueryType(m *Menu) *MenutypeQuery {
	query := &MenutypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(menu.Table, menu.FieldID, id),
			sqlgraph.To(menutype.Table, menutype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, menu.TypeTable, menu.TypeColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroup queries the group edge of a Menu.
func (c *MenuClient) QueryGroup(m *Menu) *MenugroupQuery {
	query := &MenugroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(menu.Table, menu.FieldID, id),
			sqlgraph.To(menugroup.Table, menugroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, menu.GroupTable, menu.GroupColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MenuClient) Hooks() []Hook {
	return c.hooks.Menu
}

// MenugroupClient is a client for the Menugroup schema.
type MenugroupClient struct {
	config
}

// NewMenugroupClient returns a client for the Menugroup from the given config.
func NewMenugroupClient(c config) *MenugroupClient {
	return &MenugroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `menugroup.Hooks(f(g(h())))`.
func (c *MenugroupClient) Use(hooks ...Hook) {
	c.hooks.Menugroup = append(c.hooks.Menugroup, hooks...)
}

// Create returns a create builder for Menugroup.
func (c *MenugroupClient) Create() *MenugroupCreate {
	mutation := newMenugroupMutation(c.config, OpCreate)
	return &MenugroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Menugroup.
func (c *MenugroupClient) Update() *MenugroupUpdate {
	mutation := newMenugroupMutation(c.config, OpUpdate)
	return &MenugroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MenugroupClient) UpdateOne(m *Menugroup) *MenugroupUpdateOne {
	mutation := newMenugroupMutation(c.config, OpUpdateOne, withMenugroup(m))
	return &MenugroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MenugroupClient) UpdateOneID(id int) *MenugroupUpdateOne {
	mutation := newMenugroupMutation(c.config, OpUpdateOne, withMenugroupID(id))
	return &MenugroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Menugroup.
func (c *MenugroupClient) Delete() *MenugroupDelete {
	mutation := newMenugroupMutation(c.config, OpDelete)
	return &MenugroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MenugroupClient) DeleteOne(m *Menugroup) *MenugroupDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MenugroupClient) DeleteOneID(id int) *MenugroupDeleteOne {
	builder := c.Delete().Where(menugroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MenugroupDeleteOne{builder}
}

// Create returns a query builder for Menugroup.
func (c *MenugroupClient) Query() *MenugroupQuery {
	return &MenugroupQuery{config: c.config}
}

// Get returns a Menugroup entity by its id.
func (c *MenugroupClient) Get(ctx context.Context, id int) (*Menugroup, error) {
	return c.Query().Where(menugroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MenugroupClient) GetX(ctx context.Context, id int) *Menugroup {
	m, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return m
}

// QueryMenus queries the menus edge of a Menugroup.
func (c *MenugroupClient) QueryMenus(m *Menugroup) *MenuQuery {
	query := &MenuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(menugroup.Table, menugroup.FieldID, id),
			sqlgraph.To(menu.Table, menu.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, menugroup.MenusTable, menugroup.MenusColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MenugroupClient) Hooks() []Hook {
	return c.hooks.Menugroup
}

// MenutypeClient is a client for the Menutype schema.
type MenutypeClient struct {
	config
}

// NewMenutypeClient returns a client for the Menutype from the given config.
func NewMenutypeClient(c config) *MenutypeClient {
	return &MenutypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `menutype.Hooks(f(g(h())))`.
func (c *MenutypeClient) Use(hooks ...Hook) {
	c.hooks.Menutype = append(c.hooks.Menutype, hooks...)
}

// Create returns a create builder for Menutype.
func (c *MenutypeClient) Create() *MenutypeCreate {
	mutation := newMenutypeMutation(c.config, OpCreate)
	return &MenutypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Menutype.
func (c *MenutypeClient) Update() *MenutypeUpdate {
	mutation := newMenutypeMutation(c.config, OpUpdate)
	return &MenutypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MenutypeClient) UpdateOne(m *Menutype) *MenutypeUpdateOne {
	mutation := newMenutypeMutation(c.config, OpUpdateOne, withMenutype(m))
	return &MenutypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MenutypeClient) UpdateOneID(id int) *MenutypeUpdateOne {
	mutation := newMenutypeMutation(c.config, OpUpdateOne, withMenutypeID(id))
	return &MenutypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Menutype.
func (c *MenutypeClient) Delete() *MenutypeDelete {
	mutation := newMenutypeMutation(c.config, OpDelete)
	return &MenutypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MenutypeClient) DeleteOne(m *Menutype) *MenutypeDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MenutypeClient) DeleteOneID(id int) *MenutypeDeleteOne {
	builder := c.Delete().Where(menutype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MenutypeDeleteOne{builder}
}

// Create returns a query builder for Menutype.
func (c *MenutypeClient) Query() *MenutypeQuery {
	return &MenutypeQuery{config: c.config}
}

// Get returns a Menutype entity by its id.
func (c *MenutypeClient) Get(ctx context.Context, id int) (*Menutype, error) {
	return c.Query().Where(menutype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MenutypeClient) GetX(ctx context.Context, id int) *Menutype {
	m, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return m
}

// QueryMenus queries the menus edge of a Menutype.
func (c *MenutypeClient) QueryMenus(m *Menutype) *MenuQuery {
	query := &MenuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(menutype.Table, menutype.FieldID, id),
			sqlgraph.To(menu.Table, menu.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, menutype.MenusTable, menutype.MenusColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MenutypeClient) Hooks() []Hook {
	return c.hooks.Menutype
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Create returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	u, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return u
}

// QueryMenus queries the menus edge of a User.
func (c *UserClient) QueryMenus(u *User) *MenuQuery {
	query := &MenuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(menu.Table, menu.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.MenusTable, user.MenusColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
