// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pomea/app/ent/menu"
	"github.com/pomea/app/ent/menugroup"
	"github.com/pomea/app/ent/menutype"
	"github.com/pomea/app/ent/user"
)

// MenuCreate is the builder for creating a Menu entity.
type MenuCreate struct {
	config
	mutation *MenuMutation
	hooks    []Hook
}

// SetMenuname sets the menuname field.
func (mc *MenuCreate) SetMenuname(s string) *MenuCreate {
	mc.mutation.SetMenuname(s)
	return mc
}

// SetIngredient sets the ingredient field.
func (mc *MenuCreate) SetIngredient(s string) *MenuCreate {
	mc.mutation.SetIngredient(s)
	return mc
}

// SetCalories sets the calories field.
func (mc *MenuCreate) SetCalories(i int) *MenuCreate {
	mc.mutation.SetCalories(i)
	return mc
}

// SetAddedTime sets the added_time field.
func (mc *MenuCreate) SetAddedTime(t time.Time) *MenuCreate {
	mc.mutation.SetAddedTime(t)
	return mc
}

// SetOwnerID sets the owner edge to User by id.
func (mc *MenuCreate) SetOwnerID(id int) *MenuCreate {
	mc.mutation.SetOwnerID(id)
	return mc
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (mc *MenuCreate) SetNillableOwnerID(id *int) *MenuCreate {
	if id != nil {
		mc = mc.SetOwnerID(*id)
	}
	return mc
}

// SetOwner sets the owner edge to User.
func (mc *MenuCreate) SetOwner(u *User) *MenuCreate {
	return mc.SetOwnerID(u.ID)
}

// SetTypeID sets the type edge to Menutype by id.
func (mc *MenuCreate) SetTypeID(id int) *MenuCreate {
	mc.mutation.SetTypeID(id)
	return mc
}

// SetNillableTypeID sets the type edge to Menutype by id if the given value is not nil.
func (mc *MenuCreate) SetNillableTypeID(id *int) *MenuCreate {
	if id != nil {
		mc = mc.SetTypeID(*id)
	}
	return mc
}

// SetType sets the type edge to Menutype.
func (mc *MenuCreate) SetType(m *Menutype) *MenuCreate {
	return mc.SetTypeID(m.ID)
}

// SetGroupID sets the group edge to Menugroup by id.
func (mc *MenuCreate) SetGroupID(id int) *MenuCreate {
	mc.mutation.SetGroupID(id)
	return mc
}

// SetNillableGroupID sets the group edge to Menugroup by id if the given value is not nil.
func (mc *MenuCreate) SetNillableGroupID(id *int) *MenuCreate {
	if id != nil {
		mc = mc.SetGroupID(*id)
	}
	return mc
}

// SetGroup sets the group edge to Menugroup.
func (mc *MenuCreate) SetGroup(m *Menugroup) *MenuCreate {
	return mc.SetGroupID(m.ID)
}

// Mutation returns the MenuMutation object of the builder.
func (mc *MenuCreate) Mutation() *MenuMutation {
	return mc.mutation
}

// Save creates the Menu in the database.
func (mc *MenuCreate) Save(ctx context.Context) (*Menu, error) {
	if _, ok := mc.mutation.Menuname(); !ok {
		return nil, &ValidationError{Name: "menuname", err: errors.New("ent: missing required field \"menuname\"")}
	}
	if v, ok := mc.mutation.Menuname(); ok {
		if err := menu.MenunameValidator(v); err != nil {
			return nil, &ValidationError{Name: "menuname", err: fmt.Errorf("ent: validator failed for field \"menuname\": %w", err)}
		}
	}
	if _, ok := mc.mutation.Ingredient(); !ok {
		return nil, &ValidationError{Name: "ingredient", err: errors.New("ent: missing required field \"ingredient\"")}
	}
	if _, ok := mc.mutation.Calories(); !ok {
		return nil, &ValidationError{Name: "calories", err: errors.New("ent: missing required field \"calories\"")}
	}
	if v, ok := mc.mutation.Calories(); ok {
		if err := menu.CaloriesValidator(v); err != nil {
			return nil, &ValidationError{Name: "calories", err: fmt.Errorf("ent: validator failed for field \"calories\": %w", err)}
		}
	}
	if _, ok := mc.mutation.AddedTime(); !ok {
		return nil, &ValidationError{Name: "added_time", err: errors.New("ent: missing required field \"added_time\"")}
	}
	var (
		err  error
		node *Menu
	)
	if len(mc.hooks) == 0 {
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MenuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mc.mutation = mutation
			node, err = mc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			mut = mc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MenuCreate) SaveX(ctx context.Context) *Menu {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mc *MenuCreate) sqlSave(ctx context.Context) (*Menu, error) {
	m, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	m.ID = int(id)
	return m, nil
}

func (mc *MenuCreate) createSpec() (*Menu, *sqlgraph.CreateSpec) {
	var (
		m     = &Menu{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: menu.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: menu.FieldID,
			},
		}
	)
	if value, ok := mc.mutation.Menuname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldMenuname,
		})
		m.Menuname = value
	}
	if value, ok := mc.mutation.Ingredient(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldIngredient,
		})
		m.Ingredient = value
	}
	if value, ok := mc.mutation.Calories(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menu.FieldCalories,
		})
		m.Calories = value
	}
	if value, ok := mc.mutation.AddedTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: menu.FieldAddedTime,
		})
		m.AddedTime = value
	}
	if nodes := mc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.OwnerTable,
			Columns: []string{menu.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.TypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.TypeTable,
			Columns: []string{menu.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: menutype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.GroupTable,
			Columns: []string{menu.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: menugroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return m, _spec
}
