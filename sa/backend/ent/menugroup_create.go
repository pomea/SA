// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pomea/app/ent/menu"
	"github.com/pomea/app/ent/menugroup"
)

// MenugroupCreate is the builder for creating a Menugroup entity.
type MenugroupCreate struct {
	config
	mutation *MenugroupMutation
	hooks    []Hook
}

// SetGroup sets the group field.
func (mc *MenugroupCreate) SetGroup(s string) *MenugroupCreate {
	mc.mutation.SetGroup(s)
	return mc
}

// AddMenuIDs adds the menus edge to Menu by ids.
func (mc *MenugroupCreate) AddMenuIDs(ids ...int) *MenugroupCreate {
	mc.mutation.AddMenuIDs(ids...)
	return mc
}

// AddMenus adds the menus edges to Menu.
func (mc *MenugroupCreate) AddMenus(m ...*Menu) *MenugroupCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddMenuIDs(ids...)
}

// Mutation returns the MenugroupMutation object of the builder.
func (mc *MenugroupCreate) Mutation() *MenugroupMutation {
	return mc.mutation
}

// Save creates the Menugroup in the database.
func (mc *MenugroupCreate) Save(ctx context.Context) (*Menugroup, error) {
	if _, ok := mc.mutation.Group(); !ok {
		return nil, &ValidationError{Name: "group", err: errors.New("ent: missing required field \"group\"")}
	}
	var (
		err  error
		node *Menugroup
	)
	if len(mc.hooks) == 0 {
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MenugroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mc.mutation = mutation
			node, err = mc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			mut = mc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MenugroupCreate) SaveX(ctx context.Context) *Menugroup {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mc *MenugroupCreate) sqlSave(ctx context.Context) (*Menugroup, error) {
	m, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	m.ID = int(id)
	return m, nil
}

func (mc *MenugroupCreate) createSpec() (*Menugroup, *sqlgraph.CreateSpec) {
	var (
		m     = &Menugroup{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: menugroup.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: menugroup.FieldID,
			},
		}
	)
	if value, ok := mc.mutation.Group(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menugroup.FieldGroup,
		})
		m.Group = value
	}
	if nodes := mc.mutation.MenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menugroup.MenusTable,
			Columns: []string{menugroup.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: menu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return m, _spec
}
