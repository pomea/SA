// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pomea/app/ent/menu"
	"github.com/pomea/app/ent/menugroup"
	"github.com/pomea/app/ent/menutype"
	"github.com/pomea/app/ent/predicate"
	"github.com/pomea/app/ent/user"
)

// MenuUpdate is the builder for updating Menu entities.
type MenuUpdate struct {
	config
	hooks      []Hook
	mutation   *MenuMutation
	predicates []predicate.Menu
}

// Where adds a new predicate for the builder.
func (mu *MenuUpdate) Where(ps ...predicate.Menu) *MenuUpdate {
	mu.predicates = append(mu.predicates, ps...)
	return mu
}

// SetMenuname sets the menuname field.
func (mu *MenuUpdate) SetMenuname(s string) *MenuUpdate {
	mu.mutation.SetMenuname(s)
	return mu
}

// SetIngredient sets the ingredient field.
func (mu *MenuUpdate) SetIngredient(s string) *MenuUpdate {
	mu.mutation.SetIngredient(s)
	return mu
}

// SetCalories sets the calories field.
func (mu *MenuUpdate) SetCalories(i int) *MenuUpdate {
	mu.mutation.ResetCalories()
	mu.mutation.SetCalories(i)
	return mu
}

// AddCalories adds i to calories.
func (mu *MenuUpdate) AddCalories(i int) *MenuUpdate {
	mu.mutation.AddCalories(i)
	return mu
}

// SetAddedTime sets the added_time field.
func (mu *MenuUpdate) SetAddedTime(t time.Time) *MenuUpdate {
	mu.mutation.SetAddedTime(t)
	return mu
}

// SetOwnerID sets the owner edge to User by id.
func (mu *MenuUpdate) SetOwnerID(id int) *MenuUpdate {
	mu.mutation.SetOwnerID(id)
	return mu
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (mu *MenuUpdate) SetNillableOwnerID(id *int) *MenuUpdate {
	if id != nil {
		mu = mu.SetOwnerID(*id)
	}
	return mu
}

// SetOwner sets the owner edge to User.
func (mu *MenuUpdate) SetOwner(u *User) *MenuUpdate {
	return mu.SetOwnerID(u.ID)
}

// SetTypeID sets the type edge to Menutype by id.
func (mu *MenuUpdate) SetTypeID(id int) *MenuUpdate {
	mu.mutation.SetTypeID(id)
	return mu
}

// SetNillableTypeID sets the type edge to Menutype by id if the given value is not nil.
func (mu *MenuUpdate) SetNillableTypeID(id *int) *MenuUpdate {
	if id != nil {
		mu = mu.SetTypeID(*id)
	}
	return mu
}

// SetType sets the type edge to Menutype.
func (mu *MenuUpdate) SetType(m *Menutype) *MenuUpdate {
	return mu.SetTypeID(m.ID)
}

// SetGroupID sets the group edge to Menugroup by id.
func (mu *MenuUpdate) SetGroupID(id int) *MenuUpdate {
	mu.mutation.SetGroupID(id)
	return mu
}

// SetNillableGroupID sets the group edge to Menugroup by id if the given value is not nil.
func (mu *MenuUpdate) SetNillableGroupID(id *int) *MenuUpdate {
	if id != nil {
		mu = mu.SetGroupID(*id)
	}
	return mu
}

// SetGroup sets the group edge to Menugroup.
func (mu *MenuUpdate) SetGroup(m *Menugroup) *MenuUpdate {
	return mu.SetGroupID(m.ID)
}

// Mutation returns the MenuMutation object of the builder.
func (mu *MenuUpdate) Mutation() *MenuMutation {
	return mu.mutation
}

// ClearOwner clears the owner edge to User.
func (mu *MenuUpdate) ClearOwner() *MenuUpdate {
	mu.mutation.ClearOwner()
	return mu
}

// ClearType clears the type edge to Menutype.
func (mu *MenuUpdate) ClearType() *MenuUpdate {
	mu.mutation.ClearType()
	return mu
}

// ClearGroup clears the group edge to Menugroup.
func (mu *MenuUpdate) ClearGroup() *MenuUpdate {
	mu.mutation.ClearGroup()
	return mu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (mu *MenuUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := mu.mutation.Menuname(); ok {
		if err := menu.MenunameValidator(v); err != nil {
			return 0, &ValidationError{Name: "menuname", err: fmt.Errorf("ent: validator failed for field \"menuname\": %w", err)}
		}
	}
	if v, ok := mu.mutation.Calories(); ok {
		if err := menu.CaloriesValidator(v); err != nil {
			return 0, &ValidationError{Name: "calories", err: fmt.Errorf("ent: validator failed for field \"calories\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(mu.hooks) == 0 {
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MenuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MenuUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MenuUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MenuUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MenuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   menu.Table,
			Columns: menu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: menu.FieldID,
			},
		},
	}
	if ps := mu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Menuname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldMenuname,
		})
	}
	if value, ok := mu.mutation.Ingredient(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldIngredient,
		})
	}
	if value, ok := mu.mutation.Calories(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menu.FieldCalories,
		})
	}
	if value, ok := mu.mutation.AddedCalories(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menu.FieldCalories,
		})
	}
	if value, ok := mu.mutation.AddedTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: menu.FieldAddedTime,
		})
	}
	if mu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.OwnerTable,
			Columns: []string{menu.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.OwnerTable,
			Columns: []string{menu.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.TypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.TypeTable,
			Columns: []string{menu.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: menutype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.TypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.TypeTable,
			Columns: []string{menu.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: menutype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.GroupTable,
			Columns: []string{menu.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: menugroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.GroupTable,
			Columns: []string{menu.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: menugroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menu.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MenuUpdateOne is the builder for updating a single Menu entity.
type MenuUpdateOne struct {
	config
	hooks    []Hook
	mutation *MenuMutation
}

// SetMenuname sets the menuname field.
func (muo *MenuUpdateOne) SetMenuname(s string) *MenuUpdateOne {
	muo.mutation.SetMenuname(s)
	return muo
}

// SetIngredient sets the ingredient field.
func (muo *MenuUpdateOne) SetIngredient(s string) *MenuUpdateOne {
	muo.mutation.SetIngredient(s)
	return muo
}

// SetCalories sets the calories field.
func (muo *MenuUpdateOne) SetCalories(i int) *MenuUpdateOne {
	muo.mutation.ResetCalories()
	muo.mutation.SetCalories(i)
	return muo
}

// AddCalories adds i to calories.
func (muo *MenuUpdateOne) AddCalories(i int) *MenuUpdateOne {
	muo.mutation.AddCalories(i)
	return muo
}

// SetAddedTime sets the added_time field.
func (muo *MenuUpdateOne) SetAddedTime(t time.Time) *MenuUpdateOne {
	muo.mutation.SetAddedTime(t)
	return muo
}

// SetOwnerID sets the owner edge to User by id.
func (muo *MenuUpdateOne) SetOwnerID(id int) *MenuUpdateOne {
	muo.mutation.SetOwnerID(id)
	return muo
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableOwnerID(id *int) *MenuUpdateOne {
	if id != nil {
		muo = muo.SetOwnerID(*id)
	}
	return muo
}

// SetOwner sets the owner edge to User.
func (muo *MenuUpdateOne) SetOwner(u *User) *MenuUpdateOne {
	return muo.SetOwnerID(u.ID)
}

// SetTypeID sets the type edge to Menutype by id.
func (muo *MenuUpdateOne) SetTypeID(id int) *MenuUpdateOne {
	muo.mutation.SetTypeID(id)
	return muo
}

// SetNillableTypeID sets the type edge to Menutype by id if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableTypeID(id *int) *MenuUpdateOne {
	if id != nil {
		muo = muo.SetTypeID(*id)
	}
	return muo
}

// SetType sets the type edge to Menutype.
func (muo *MenuUpdateOne) SetType(m *Menutype) *MenuUpdateOne {
	return muo.SetTypeID(m.ID)
}

// SetGroupID sets the group edge to Menugroup by id.
func (muo *MenuUpdateOne) SetGroupID(id int) *MenuUpdateOne {
	muo.mutation.SetGroupID(id)
	return muo
}

// SetNillableGroupID sets the group edge to Menugroup by id if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableGroupID(id *int) *MenuUpdateOne {
	if id != nil {
		muo = muo.SetGroupID(*id)
	}
	return muo
}

// SetGroup sets the group edge to Menugroup.
func (muo *MenuUpdateOne) SetGroup(m *Menugroup) *MenuUpdateOne {
	return muo.SetGroupID(m.ID)
}

// Mutation returns the MenuMutation object of the builder.
func (muo *MenuUpdateOne) Mutation() *MenuMutation {
	return muo.mutation
}

// ClearOwner clears the owner edge to User.
func (muo *MenuUpdateOne) ClearOwner() *MenuUpdateOne {
	muo.mutation.ClearOwner()
	return muo
}

// ClearType clears the type edge to Menutype.
func (muo *MenuUpdateOne) ClearType() *MenuUpdateOne {
	muo.mutation.ClearType()
	return muo
}

// ClearGroup clears the group edge to Menugroup.
func (muo *MenuUpdateOne) ClearGroup() *MenuUpdateOne {
	muo.mutation.ClearGroup()
	return muo
}

// Save executes the query and returns the updated entity.
func (muo *MenuUpdateOne) Save(ctx context.Context) (*Menu, error) {
	if v, ok := muo.mutation.Menuname(); ok {
		if err := menu.MenunameValidator(v); err != nil {
			return nil, &ValidationError{Name: "menuname", err: fmt.Errorf("ent: validator failed for field \"menuname\": %w", err)}
		}
	}
	if v, ok := muo.mutation.Calories(); ok {
		if err := menu.CaloriesValidator(v); err != nil {
			return nil, &ValidationError{Name: "calories", err: fmt.Errorf("ent: validator failed for field \"calories\": %w", err)}
		}
	}

	var (
		err  error
		node *Menu
	)
	if len(muo.hooks) == 0 {
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MenuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MenuUpdateOne) SaveX(ctx context.Context) *Menu {
	m, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return m
}

// Exec executes the query on the entity.
func (muo *MenuUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MenuUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MenuUpdateOne) sqlSave(ctx context.Context) (m *Menu, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   menu.Table,
			Columns: menu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: menu.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Menu.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := muo.mutation.Menuname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldMenuname,
		})
	}
	if value, ok := muo.mutation.Ingredient(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldIngredient,
		})
	}
	if value, ok := muo.mutation.Calories(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menu.FieldCalories,
		})
	}
	if value, ok := muo.mutation.AddedCalories(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menu.FieldCalories,
		})
	}
	if value, ok := muo.mutation.AddedTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: menu.FieldAddedTime,
		})
	}
	if muo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.OwnerTable,
			Columns: []string{menu.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.OwnerTable,
			Columns: []string{menu.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.TypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.TypeTable,
			Columns: []string{menu.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: menutype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.TypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.TypeTable,
			Columns: []string{menu.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: menutype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.GroupTable,
			Columns: []string{menu.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: menugroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.GroupTable,
			Columns: []string{menu.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: menugroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	m = &Menu{config: muo.config}
	_spec.Assign = m.assignValues
	_spec.ScanValues = m.scanValues()
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menu.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return m, nil
}
